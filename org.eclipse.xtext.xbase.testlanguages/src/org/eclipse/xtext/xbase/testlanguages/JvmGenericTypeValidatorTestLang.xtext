grammar org.eclipse.xtext.xbase.testlanguages.JvmGenericTypeValidatorTestLang with org.eclipse.xtext.xbase.Xbase

generate jvmGenericTypeValidatorTestLang "http://www.eclipse.org/xtext/xbase/testlanguages/JvmGenericTypeValidatorTestLang"

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

JvmGenericTypeValidatorTestLangModel:
	('package' package=QualifiedName ';'?)?
	importSection=XImportSection?
	(modelTypes+=MyType)*;

MyType:
	MyClass | MyInterface | MyClassWithSuperTypes;

MyClass:
	(abstract ?= 'abstract')? 'class' name=ValidID
	("extends" extends=JvmParameterizedTypeReference)?
	('implements' implements+=JvmParameterizedTypeReference (',' implements+=JvmParameterizedTypeReference)*)? '{'
		(members+=MyMember)*
	'}';

MyInterface:
	'interface' name=ValidID ('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
	('extends' extends+=JvmParameterizedTypeReference (',' extends+=JvmParameterizedTypeReference)*)? '{'
	'}';

/**
 * Special class where the first specified super type is expected to be a class
 * and the following ones interfaces.
 * Moreover, the class is always implicitly implements Serializable.
 * Just a corner case for testing JvmGenericTypeValidator.
 */
MyClassWithSuperTypes:
	'classWithSuperTypes' name=ValidID
	("superTypes" superTypes+=JvmParameterizedTypeReference (',' superTypes+=JvmParameterizedTypeReference)*)? '{'
	'}'
;

MyMember:
	({MyConstructor} 'constructor'
		'(' (parameters+=JvmFormalParameter (',' parameters+=JvmFormalParameter)*)? ')'
		('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		expression=XBlockExpression)
	|
	({MyField} type=JvmTypeReference name=ValidID)
	|
	({MyMethod} 'def' (static ?= 'static')? (private ?= 'private')?
		('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
		type=JvmTypeReference name=ValidID
		'(' (parameters+=JvmFormalParameter (',' parameters+=JvmFormalParameter)*)? ')'
		('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
		expression=XBlockExpression)
	|
	MyClass // nested local class
;
